jQuery(document).ready(function($) {
    var travelerCount = 1;  // Track how many travelers have been added
    var maxTravelers = 5;   // Max number of travelers allowed

    // Initialize Flatpickr for the first traveler's date of birth field
    initializeFlatpickr($('#dob'));
    initializeFlatpickr($('#arrival'));

    // Handle adding a new traveler when "Add Traveler" is clicked
    $('#add-traveler-btn').on('click', function(e) {
        e.preventDefault();

        if (travelerCount < maxTravelers) {
            // Clone the first traveler card
            var clonedCard = $('.traveler-card:first').clone();

            // Increment traveler count
            travelerCount++;

            // Update the card header to reflect new traveler number
            clonedCard.find('.card-header h4').text('Traveler ' + travelerCount);

            // Clear all inputs and selects in the cloned card
            clonedCard.find('input, select, textarea').each(function() {
                var type = $(this).attr('type');

                if (type === 'text' || type === 'email' || type === 'tel' || type === 'date') {
                    $(this).val('');  // Clear text, email, tel, and date fields
                } else if (type === 'file') {
                    $(this).val('');  // Clear file input field
                    $(this).next('.custom-file-label').text('Choose file');  // Reset file input label
                } else if ($(this).is('select')) {
                    $(this).val('');  // Reset dropdown/select fields
                }
            });
            var newId = "";
            // Remove any existing Flatpickr instances and generated alt input before cloning
            clonedCard.find('input[data-toggle="flatpickr"]').each(function() {
                // Destroy the existing Flatpickr instance if it exists
                if (this._flatpickr) {
                    this._flatpickr.destroy();
                }

                // Remove the hidden input generated by Flatpickr if it exists
                $(this).siblings('.flatpickr-input').remove();
                $(this).siblings('.flatpickr-alt-input').remove();  // Also removes alternate Flatpickr input

                // Clear the value of the cloned date field
                $(this).val('');

                // Create a unique ID for the cloned input
                var originalId = $(this).attr('id');
                newId = originalId + '-' + travelerCount;  // Append the traveler count to the ID
                $(this).attr('id', newId);

                // Reinitialize Flatpickr on the cloned input
                initializeFlatpickr($(this));

            });

            clonedCard.find('input[type="file"]').each(function() {
                var originalId = $(this).attr('id');
                var newId = originalId + '-' + travelerCount; // Create a unique ID for each traveler
                $(this).attr('id', newId); // Set the new ID

                // Update the label `for` attribute to match the new input ID
                $(this).next('label.custom-file-label').attr('for', newId).text("Choose file"); // Reset label text
            });

            // Append the cloned card before the "Add Traveler" button
            clonedCard.insertBefore('#add-traveler-btn').hide().fadeIn();

        } else {
            alert('You can only add up to ' + maxTravelers + ' travelers.');
        }
    });

    // Function to display the file name when a file is selected
    window.showFileName = function(input) {
        var fileName = input.files.length > 0 ? input.files[0].name : "Choose file";
        $(input).next('.custom-file-label').text(fileName);
    };

    // General function to initialize Flatpickr on any input field
    function initializeFlatpickr(element) {
        element.flatpickr({
            dateFormat: 'Y-m-d',  // Date format in input field
            altInput: true,
            altFormat: 'F j, Y',  // Display format
            allowInput: true
        });
    }

// Handle the "Next" button click

$('#next').on('click', function(e) {
    e.preventDefault();

    // Clear previous details
    $('#traveler-details-list').html('');

    var hasIncompleteInfo = false; // Flag to check if any traveler card is incomplete
    var travelerCount = 0; // Counter for the number of valid travelers
    // const costPerTraveler = 100; // Cost per traveler

    // Function to handle file reading and Base64 conversion
    function readFileAsBase64(file) {
        return new Promise(function(resolve, reject) {
            if (file) {
                var reader = new FileReader();
                reader.onloadend = function() {
                    resolve(reader.result); // Return the Base64 encoded file content
                };
                reader.onerror = reject;
                reader.readAsDataURL(file); // Convert file to Base64
            } else {
                resolve(null); // No file, resolve as null
            }
        });
    }

    // Process each traveler
    var travelerPromises = $('.traveler-card').map(function(index, element) {
        var firstName = $(this).find('input[name="first-name"]').val();
        var lastName = $(this).find('input[name="last-name"]').val();
        var dob = $(this).find('input[name="dob"]').val();
        var gender = $(this).find('select[name="gender"]').val();

        // Fetch file inputs
        var passportFile = $(this).find('input[name="passport"]')[0].files[0];
        var photoFile = $(this).find('input[name="photo"]')[0].files[0];

        // Skip any traveler card with incomplete information
        if (!firstName || !lastName || !dob || !gender) {
            alert('Please fill out all fields for traveler ' + (index + 1));
            hasIncompleteInfo = true;
            return false; // Stop processing if incomplete
        }

        travelerCount++; // Increment the traveler count for valid travelers

        // Return a promise that processes files and generates the summary
        return Promise.all([
            readFileAsBase64(passportFile),
            readFileAsBase64(photoFile)
        ]).then(function(results) {
            var passportBase64 = results[0];
            var photoBase64 = results[1];

            var summaryHtml = `
                <div class="card mt-3">
                    <div class="card-body">
                        <h4>Traveler ${index + 1}</h4>
                        <p><strong>First Name:</strong> ${firstName}</p>
                        <p><strong>Last Name:</strong> ${lastName}</p>
                        <p><strong>Date of Birth:</strong> ${dob}</p>
                        <p><strong>Gender:</strong> ${gender}</p>
                        <p><strong>Passport File:</strong><br>
                        ${passportBase64 ? `<img src="${passportBase64}" alt="Passport" width="100">` : 'No file uploaded'}</p>
                        <p><strong>Photo File:</strong><br>
                        ${photoBase64 ? `<img src="${photoBase64}" alt="Photo" width="100">` : 'No file uploaded'}</p>
                    </div>
                </div>
            `;
            $('#traveler-details-list').append(summaryHtml);
        });
    }).get();

    if (hasIncompleteInfo) return; // Stop if any info was incomplete

    // Wait for all traveler processing to finish
    Promise.all(travelerPromises).then(function() {
        // Collect general details outside the traveler cards (phone, email, arrival date)
        var phone = $('input[name="phone"]').val();
        var email = $('input[name="email"]').val();
        var arrivalDate = $('#arrival').val();

        if (!phone || !email || !arrivalDate) {
            alert('Please fill in all general details.');
            return;
        }

        // Calculate total cost
        // var totalCost = travelerCount * costPerTraveler;

        // Append general details and total cost to the summary
        var generalDetailsHtml = `
            <div class="card mt-3">
                <div class="card-body">
                    <h4>General Details</h4>
                    <p><strong>Phone:</strong> ${phone}</p>
                    <p><strong>Email:</strong> ${email}</p>
                    <p><strong>Date of Arrival:</strong> ${arrivalDate}</p>
                    
                </div>
            </div>
        `;
        $('#traveler-details-list').append(generalDetailsHtml);

        // Hide the form and show the details section
        $('.main-form-container').hide();
        $('#submitted-details').show();

        // Check if the back button already exists, if not, create it
        if ($('#back-to-form-btn').length === 0) {
            var backButton = `<button id="back-to-form-btn" class="btn btn-lg btn-secondary mt-4">Back to Form</button>`;
            $('#traveler-details-list').append(backButton);

            // Handle the "Back to Form" button click
            $('#back-to-form-btn').on('click', function() {
                $('#submitted-details').hide(); // Hide the details section
                $('.main-form-container').show(); // Show the form again
                $('#traveler-details-list').html(''); // Clear the traveler details
            });
        }
    });


    $('input[name="service"]').prop('checked', false); // Uncheck all options
    $('#standardService').prop('checked', true); // Set the standard service (60 dollars) as checked

    // Calculate the total cost with standard service (60 dollars)
    let serviceCost = $('#standardService').val(); // Get the value from the checked radio
    let totalCost = serviceCost * travelerCount;

    // Display the total cost in the table
    $('.table-of-total tbody').html(`
        <tr>
            <td>${$('#standardService').next().text()}</td>
            <td>${travelerCount}</td>
            <td>$${totalCost.toFixed(2)}</td>
        </tr>
    `);
    $('.table-of-total tfoot th:nth-child(3)').text(`$${totalCost.toFixed(2)}`);
    

});

$('input[name="service"]').on('change', function() {

    let serviceCost = $('input[name="service"]:checked').val(); // Get the value from the checked radio
    let totalCost = serviceCost * travelerCount;

    // Update the total cost in the table
    $('.table-of-total tbody').html(`
        <tr>
            <td>${$('input[name="service"]:checked').next().text()}</td>
            <td>${travelerCount}</td>
            <td>$${totalCost.toFixed(2)}</td>
        </tr>
    `);
    $('.table-of-total tfoot th:nth-child(3)').text(`$${totalCost.toFixed(2)}`);
});


});